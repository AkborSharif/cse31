Problem 1

A)

1001 0110            150 / -22  /-105 / -106  /23
0110 1001            105 /105  /105 /105 / -22
0011 1010            58/  58 /58 /58/ -69                                                                                      
1111 0000            240/ -112/  -15  /-16/113      

B)

Can represent positive numbers-> T T T T T

Can represent negative numbers-> F T T T T     

Has more than one representation for 0-> F T T F F

Use the same addition process as unsigned->  T F F T T                                        



C) What is the value in decimal of the most negative 16-bit 2’s complement integer? 

2^(n-1)  = 2^(16-1) =  -32768


D) What is the value in decimal of the most positive 16-bit signed integer? 

2^(n-1) -1 = 32767




Problem 2

#include <stdio.h>
#include <string.h>


char** copyStrArray (int argc, char** argv) 
  {
    char** dest = (char**) malloc( (argc) * sizeof(char*) );

    for (int i=0; i<argc; i++) 
{
        dest[i] = (char*)malloc((strlen(argv[i]) + 1) * sizeof(char));

        strcpy(dest[i], argv[i], strlen(argv[i]));
}

    return dest;
  }

int main (int argc, char **argv) 
{
    char **ptr;
    ptr = copyStrArray (argc, argv);
}


Problem 3

A)
char* upcase(char* str) 
{ 
char* p; 
char* result; 
result = (char*) malloc((strlen(str)+1)*sizeof(char)); 
strcpy(result, str); 
for( p=result; *p!=’\0’; p++ )
  {
/* Fill-in ‘A’ = 65, ‘a’ = 97, ‘Z’ = 90 , ‘z’ = 122 */ 
if( *p>=‘a’ && *p<= ‘z’ )
{
*p-=32;
}
  }

return result;

}

B)
void upcase_by_ref( char** n ) { 
 *n = upcase(*n);
}
  } 

} 
void upcase_name(char* names[], int i) { 

upcase_by_ref( &(names[i]) ); 

}  

Problem 4

a. Complete the following setName, getStudentID, and setStudentID functions:

#define MAX_NAME_LEN 128

typedef struct {
char name[MAX_NAME_LEN];
unsigned long sid;
} Student;
/* return the nameof student s */

const char* getName(const Student* s) 
{
return s->name;
}
/* set the name of student s */

void setName(Student* s, const char* name) 
{
strcpy(s->name, name, MAX_NAME_LEN);

}/
* return the SID of student s */

unsigned long getStudentID(const Student* s) 

{
return s->sid;

}

/* set the SID of student s */

void setStudentID(Student* s, unsigned long sid) 

{

s->sid = sid;

}
b. What is the logical error in the following function?

Student* makeDefault(void) 
{

Student s;

setName(&s, "John");

setStudentID(&s, 12345678);

return &s;

}

Ans: s is stored in the stack, data will be overwritten when function ends.
































